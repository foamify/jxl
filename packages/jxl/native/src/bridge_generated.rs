#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_init_decoder_impl(
    port_: MessagePort,
    jxl_bytes: impl Wire2Api<Vec<u8>> + UnwindSafe,
    key: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, JxlInfo, _>(
        WrapInfo {
            debug_name: "init_decoder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_jxl_bytes = jxl_bytes.wire2api();
            let api_key = key.wire2api();
            move |task_callback| Result::<_, ()>::Ok(init_decoder(api_jxl_bytes, api_key))
        },
    )
}
fn wire_reset_decoder_impl(port_: MessagePort, key: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "reset_decoder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            move |task_callback| Result::<_, ()>::Ok(reset_decoder(api_key))
        },
    )
}
fn wire_dispose_decoder_impl(port_: MessagePort, key: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "dispose_decoder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            move |task_callback| Result::<_, ()>::Ok(dispose_decoder(api_key))
        },
    )
}
fn wire_get_next_frame_impl(
    port_: MessagePort,
    key: impl Wire2Api<String> + UnwindSafe,
    crop_info: impl Wire2Api<Option<CropInfo>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Frame, _>(
        WrapInfo {
            debug_name: "get_next_frame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            let api_crop_info = crop_info.wire2api();
            move |task_callback| Result::<_, ()>::Ok(get_next_frame(api_key, api_crop_info))
        },
    )
}
fn wire_is_jxl_impl(port_: MessagePort, jxl_bytes: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "is_jxl",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_jxl_bytes = jxl_bytes.wire2api();
            move |task_callback| Result::<_, ()>::Ok(is_jxl(api_jxl_bytes))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for Frame {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.data.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Frame {}
impl rust2dart::IntoIntoDart<Frame> for Frame {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for JxlInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
            self.image_count.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.is_hdr.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for JxlInfo {}
impl rust2dart::IntoIntoDart<JxlInfo> for JxlInfo {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_init_decoder(port_: MessagePort, jxl_bytes: Box<[u8]>, key: String) {
        wire_init_decoder_impl(port_, jxl_bytes, key)
    }

    #[wasm_bindgen]
    pub fn wire_reset_decoder(port_: MessagePort, key: String) {
        wire_reset_decoder_impl(port_, key)
    }

    #[wasm_bindgen]
    pub fn wire_dispose_decoder(port_: MessagePort, key: String) {
        wire_dispose_decoder_impl(port_, key)
    }

    #[wasm_bindgen]
    pub fn wire_get_next_frame(port_: MessagePort, key: String, crop_info: JsValue) {
        wire_get_next_frame_impl(port_, key, crop_info)
    }

    #[wasm_bindgen]
    pub fn wire_is_jxl(port_: MessagePort, jxl_bytes: Box<[u8]>) {
        wire_is_jxl_impl(port_, jxl_bytes)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<CropInfo> for JsValue {
        fn wire2api(self) -> CropInfo {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                4,
                "Expected 4 elements, got {}",
                self_.length()
            );
            CropInfo {
                width: self_.get(0).wire2api(),
                height: self_.get(1).wire2api(),
                left: self_.get(2).wire2api(),
                top: self_.get(3).wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl<T> Wire2Api<Option<T>> for JsValue
    where
        JsValue: Wire2Api<T>,
    {
        fn wire2api(self) -> Option<T> {
            (!self.is_null() && !self.is_undefined()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<u32> for JsValue {
        fn wire2api(self) -> u32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_init_decoder(
        port_: i64,
        jxl_bytes: *mut wire_uint_8_list,
        key: *mut wire_uint_8_list,
    ) {
        wire_init_decoder_impl(port_, jxl_bytes, key)
    }

    #[no_mangle]
    pub extern "C" fn wire_reset_decoder(port_: i64, key: *mut wire_uint_8_list) {
        wire_reset_decoder_impl(port_, key)
    }

    #[no_mangle]
    pub extern "C" fn wire_dispose_decoder(port_: i64, key: *mut wire_uint_8_list) {
        wire_dispose_decoder_impl(port_, key)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_next_frame(
        port_: i64,
        key: *mut wire_uint_8_list,
        crop_info: *mut wire_CropInfo,
    ) {
        wire_get_next_frame_impl(port_, key, crop_info)
    }

    #[no_mangle]
    pub extern "C" fn wire_is_jxl(port_: i64, jxl_bytes: *mut wire_uint_8_list) {
        wire_is_jxl_impl(port_, jxl_bytes)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_crop_info_0() -> *mut wire_CropInfo {
        support::new_leak_box_ptr(wire_CropInfo::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<CropInfo> for *mut wire_CropInfo {
        fn wire2api(self) -> CropInfo {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<CropInfo>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<CropInfo> for wire_CropInfo {
        fn wire2api(self) -> CropInfo {
            CropInfo {
                width: self.width.wire2api(),
                height: self.height.wire2api(),
                left: self.left.wire2api(),
                top: self.top.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_CropInfo {
        width: u32,
        height: u32,
        left: u32,
        top: u32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_CropInfo {
        fn new_with_null_ptr() -> Self {
            Self {
                width: Default::default(),
                height: Default::default(),
                left: Default::default(),
                top: Default::default(),
            }
        }
    }

    impl Default for wire_CropInfo {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
