// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

abstract class Jxl {
  Future<JxlInfo> initDecoder(
      {required Uint8List jxlBytes, required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitDecoderConstMeta;

  Future<bool> resetDecoder({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResetDecoderConstMeta;

  Future<bool> disposeDecoder({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisposeDecoderConstMeta;

  Future<Frame> getNextFrame(
      {required String key, CropInfo? cropInfo, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetNextFrameConstMeta;

  Future<bool> isJxl({required Uint8List jxlBytes, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsJxlConstMeta;
}

class CropInfo {
  final int width;
  final int height;
  final int left;
  final int top;

  const CropInfo({
    required this.width,
    required this.height,
    required this.left,
    required this.top,
  });
}

class Frame {
  final Float32List data;
  final double duration;
  final int width;
  final int height;

  const Frame({
    required this.data,
    required this.duration,
    required this.width,
    required this.height,
  });
}

class JxlInfo {
  final int width;
  final int height;
  final int imageCount;
  final double duration;

  const JxlInfo({
    required this.width,
    required this.height,
    required this.imageCount,
    required this.duration,
  });
}

class JxlImpl implements Jxl {
  final JxlPlatform _platform;
  factory JxlImpl(ExternalLibrary dylib) => JxlImpl.raw(JxlPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory JxlImpl.wasm(FutureOr<WasmModule> module) =>
      JxlImpl(module as ExternalLibrary);
  JxlImpl.raw(this._platform);
  Future<JxlInfo> initDecoder(
      {required Uint8List jxlBytes, required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(jxlBytes);
    var arg1 = _platform.api2wire_String(key);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_decoder(port_, arg0, arg1),
      parseSuccessData: _wire2api_jxl_info,
      parseErrorData: null,
      constMeta: kInitDecoderConstMeta,
      argValues: [jxlBytes, key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitDecoderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_decoder",
        argNames: ["jxlBytes", "key"],
      );

  Future<bool> resetDecoder({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_reset_decoder(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kResetDecoderConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kResetDecoderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "reset_decoder",
        argNames: ["key"],
      );

  Future<bool> disposeDecoder({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_dispose_decoder(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kDisposeDecoderConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisposeDecoderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "dispose_decoder",
        argNames: ["key"],
      );

  Future<Frame> getNextFrame(
      {required String key, CropInfo? cropInfo, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    var arg1 = _platform.api2wire_opt_box_autoadd_crop_info(cropInfo);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_next_frame(port_, arg0, arg1),
      parseSuccessData: _wire2api_frame,
      parseErrorData: null,
      constMeta: kGetNextFrameConstMeta,
      argValues: [key, cropInfo],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetNextFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_next_frame",
        argNames: ["key", "cropInfo"],
      );

  Future<bool> isJxl({required Uint8List jxlBytes, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(jxlBytes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_jxl(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kIsJxlConstMeta,
      argValues: [jxlBytes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsJxlConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_jxl",
        argNames: ["jxlBytes"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  Float32List _wire2api_ZeroCopyBuffer_Float32List(dynamic raw) {
    return raw as Float32List;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  Float32List _wire2api_float_32_list(dynamic raw) {
    return raw as Float32List;
  }

  Frame _wire2api_frame(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Frame(
      data: _wire2api_ZeroCopyBuffer_Float32List(arr[0]),
      duration: _wire2api_f64(arr[1]),
      width: _wire2api_u32(arr[2]),
      height: _wire2api_u32(arr[3]),
    );
  }

  JxlInfo _wire2api_jxl_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return JxlInfo(
      width: _wire2api_u32(arr[0]),
      height: _wire2api_u32(arr[1]),
      imageCount: _wire2api_usize(arr[2]),
      duration: _wire2api_f64(arr[3]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
