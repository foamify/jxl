// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class JxlPlatform extends FlutterRustBridgeBase<JxlWire>
    with FlutterRustBridgeSetupMixin {
  JxlPlatform(FutureOr<WasmModule> dylib) : super(JxlWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_crop_info(CropInfo raw) {
    return api2wire_crop_info(raw);
  }

  @protected
  List<dynamic> api2wire_crop_info(CropInfo raw) {
    return [
      api2wire_u32(raw.width),
      api2wire_u32(raw.height),
      api2wire_u32(raw.left),
      api2wire_u32(raw.top)
    ];
  }

  @protected
  List<dynamic>? api2wire_opt_box_autoadd_crop_info(CropInfo? raw) {
    return raw == null ? null : api2wire_box_autoadd_crop_info(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }
// Section: finalizer
}

// Section: WASM wire module

@JS('wasm_bindgen')
external JxlWasmModule get wasmModule;

@JS()
@anonymous
class JxlWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external JxlWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_init_decoder(
      NativePortType port_, Uint8List jxl_bytes, String key);

  external dynamic /* void */ wire_reset_decoder(
      NativePortType port_, String key);

  external dynamic /* void */ wire_dispose_decoder(
      NativePortType port_, String key);

  external dynamic /* void */ wire_get_next_frame(
      NativePortType port_, String key, List<dynamic>? crop_info);

  external dynamic /* void */ wire_is_jxl(
      NativePortType port_, Uint8List jxl_bytes);
}

// Section: WASM wire connector

class JxlWire extends FlutterRustBridgeWasmWireBase<JxlWasmModule> {
  JxlWire(FutureOr<WasmModule> module)
      : super(WasmModule.cast<JxlWasmModule>(module));

  void wire_init_decoder(
          NativePortType port_, Uint8List jxl_bytes, String key) =>
      wasmModule.wire_init_decoder(port_, jxl_bytes, key);

  void wire_reset_decoder(NativePortType port_, String key) =>
      wasmModule.wire_reset_decoder(port_, key);

  void wire_dispose_decoder(NativePortType port_, String key) =>
      wasmModule.wire_dispose_decoder(port_, key);

  void wire_get_next_frame(
          NativePortType port_, String key, List<dynamic>? crop_info) =>
      wasmModule.wire_get_next_frame(port_, key, crop_info);

  void wire_is_jxl(NativePortType port_, Uint8List jxl_bytes) =>
      wasmModule.wire_is_jxl(port_, jxl_bytes);
}
